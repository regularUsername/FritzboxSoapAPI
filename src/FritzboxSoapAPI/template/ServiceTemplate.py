'''
autogenerated file
do not modify!
'''

import requests
from requests.auth import HTTPDigestAuth
from bs4 import BeautifulSoup, Tag

class _ServiceBase():
    def __init__(self,
                 user,
                 password,
                 certificate=None,
                 fritzbox_url="https://fritz.box"):
        
        self._session = requests.Session()
        self._session.auth = HTTPDigestAuth(user, password)
        self._session.verify = certificate
        self._baseURL = fritzbox_url.rstrip('/')+"/tr064"


    def _parse_response(self, resp):
        retVals = {}
        for x in resp.children:
            if isinstance(x, Tag):
                if x.text.isnumeric():
                    retVals[x.name] = int(x.text)
                else:
                    retVals[x.name] = x.text

        if len(retVals) == 1:
            return list(retVals.values())[0]

        return retVals

    def _soap_action(self, surl, sservice, saction, sarguments={}):
        header = {
            'Content-Type': 'text/xml; charset="utf-8"',
            'SOAPACTION': f"{sservice}#{saction}"
        }
        response = self._session.post(
            url=surl,
            headers=header,
            data=self._create_soap_request(saction, sservice, sarguments),
            timeout=31
        )
        soup = BeautifulSoup(response.text, "lxml-xml")

        if response.status_code >= 500:
            code = soup.find("errorCode").text
            desc = soup.find("errorDescription").text
            raise Exception(f"UPnPError({code}): {desc}")
        response.raise_for_status()

        return soup

    def _create_soap_request(self, saction, sservice, arguments={}):
        argtags = ""
        for k, v in arguments.items():
            argtags += f'\n<{k}>{v}</{k}>'
        return f'''<?xml version="1.0"?>
<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"
s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
<s:Body>
<u:{saction} xmlns:u="{sservice}">{argtags}
</u:{saction}>
</s:Body>
</s:Envelope>'''.encode('utf-8')

    def getList(self, listPath):
        hostlistUrl = self._baseUrl+listPath
        response = self._session.get(hostlistUrl)
        soup = BeautifulSoup(response.text, "lxml-xml")

        items = []
        for item in soup.List:
            if isinstance(item, Tag):
                items.append(
                    {child.name: child.text
                        for child in item if isinstance(child, Tag)}
                )
        return items

{% for sname,sdesc in services.items() %}
class {{ sname }}(_ServiceBase):
{% for aname,action in sdesc.actions.items() %}
    def {{ aname }}(self, {{action.arguments|join(', ')}}):
        '''
            Parameters:
                    {% if action.arguments -%}
                    {% for a in action.arguments -%}
                    {{ a }}
                    {% endfor -%}
                    {% else -%}
                    None
                    {% endif %}
            Returns:
                    {% if action.returnvalues|length > 1 -%}
                    dict({{action.returnvalues|join(', ')}})
                    {%- elif action.returnvalues| length == 1 -%}
                    {{ action.returnvalues.0 }}
                    {%- else -%}
                    None
                    {%endif%}
        '''
        {% if action.arguments -%}
        kwargs = {
        {%- for x in action.arguments %}
        "{{x}}": {{x}}, 
        {%- endfor -%}
        }
        {%- else -%}
        kwargs = {}
        {%- endif %}
        soup = self._soap_action(self._baseURL+"{{sdesc.controlURL}}",
                                 "{{sdesc.serviceType}}",
                                 "{{ aname }}",
                                 kwargs)

        response = soup.find("u:{{ aname }}Response")
        return self._parse_response(response)
        {% endfor %}
{% endfor %}
